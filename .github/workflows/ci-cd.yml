name: Java CI/CD Pipeline

on:
  push:
    branches: [ "main", "staging", "development" ]
  pull_request:
    branches: [ "main", "staging", "development" ]

env:
  # Common environment variables
  JAVA_VERSION: '17'
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: root
  POSTGRES_DB: eC-vendor-db
  POSTGRES_PORT: 5437

jobs:
  build:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - ${{ env.POSTGRES_PORT }}:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Build with Maven
      run: mvn -B package --file pom.xml
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}
        SPRING_DATASOURCE_USERNAME: ${{ env.POSTGRES_USER }}
        SPRING_DATASOURCE_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
    
    - name: Run Tests
      run: mvn test
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}
        SPRING_DATASOURCE_USERNAME: ${{ env.POSTGRES_USER }}
        SPRING_DATASOURCE_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
      
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: app-jar
        path: target/*.jar

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'ecom-multi-vendor'
        path: '.'
        format: 'HTML'
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: reports

  deploy-staging:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: app-jar

    - name: Deploy to Staging
      env:
        SPRING_PROFILES_ACTIVE: staging
      run: echo "Add staging deployment commands here"

  deploy-production:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: app-jar

    - name: Deploy to Production
      env:
        SPRING_PROFILES_ACTIVE: prod
      run: echo "Add production deployment commands here"
